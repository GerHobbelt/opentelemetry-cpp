#pragma once

#include "opentelemetry/version.h"

#include "opentelemetry/event/Property.hpp"

#include <cstdint>
#include <map>
#include <string>
#include <tuple>

OPENTELEMETRY_BEGIN_NAMESPACE

namespace event
{
static constexpr const char *defaultName = "unknown";

/// <summary>
/// The Properties class encapsulates event properties.
/// </summary>
class Properties
{
  std::string name;
  std::map<std::string, Property> m_props;

public:
  /// <summary>
  /// Constructs an Properties object, taking a string for the property name.
  /// You must supply a non-empty name whenever you supply any custom properties for the
  /// event via <b>Properties</b>.
  /// </summary>
  Properties(const std::string &name) : name(name){};

  /// <summary>
  /// Constructs an Properties object (the default constructor).
  /// You must supply a non-empty name whenever you supply any custom properties for the event via
  /// <b>Properties</b>.
  /// </summary>
  Properties() : name(defaultName){};

  /// <summary>
  /// The Properties copy constructor.
  /// </summary>
  Properties(Properties const &copy) : name(copy.name), m_props(copy.m_props) {}

  /// <summary>
  /// The Properties equals operator overload.
  /// </summary>
  Properties &operator=(Properties const &copy)
  {
    m_props = copy.m_props;
    return *this;
  }

  /// <summary>
  /// Constructs an Properties object from a map of string to Property.<br>
  /// You must supply a non-empty name whenever you supply any custom properties for the event via
  /// <b>Properties</b>.
  /// </summary>
  Properties(const std::string &name, const std::map<std::string, Property> &properties)
      : name(name), m_props(properties)
  {}

  /// <summary>
  /// Adds a map of <string, Property> to Properties.
  /// </summary>
  Properties &operator+=(const std::map<std::string, Property> &properties)
  {
    for (auto &kv : properties)
    {
      auto key     = kv.first;
      auto val     = kv.second;
      m_props[key] = val;
    }
    return (*this);
  }

  /// <summary>
  /// Assigns a map of <string, Property> to Properties.
  /// </summary>
  Properties &operator=(const std::map<std::string, Property> &properties)
  {
    m_props.clear();
    (*this) += properties;
    return (*this);
  }

  /// <summary>
  /// An Properties constructor using a C++11 initializer list.
  /// </summary>
  Properties(const std::string &name,
             std::initializer_list<std::pair<std::string const, Property>> properties)
      : name(name)
  {
    (*this) = properties;
  }

  /// <summary>
  /// An Properties assignment operator using C++11 initializer list.
  /// </summary>
  Properties &operator=(std::initializer_list<std::pair<std::string const, Property>> properties)
  {
    m_props.clear();
    for (auto &kv : properties)
    {
      auto key     = kv.first;
      auto val     = kv.second;
      m_props[key] = val;
    }
    return (*this);
  }

  /// <summary>
  /// Sets the name of an event, given a string for the event name.
  /// You must supply a non-empty name whenever you supply any custom properties for the event via
  /// <b>Properties</b>.
  /// </summary>
  /// <param name="name">A string that contains the name of the event.</param>
  bool SetName(const std::string &name)
  {
    // TODO: add event name validation rules
    this->name = name;
    return true;
  };

  /// <summary>
  /// Gets the name of an event. An empty string is returned if the name was never set.
  /// </summary>
  /// <returns>Name of the event</returns>
  const std::string &GetName() const { return name; }

#if 0
  /// <summary>
  /// [optional] Sets the timestamp of an event, in milliseconds.
  /// <b>Note:</b> This method overrides the default timestamp generated by the telemetry system.
  /// </summary>
  /// <param name="timestampInEpochMillis">The UNIX timestamp in milliseconds. This is the amount of
  /// time since 00:00:00 Coordinated Universal Time (UTC), January, 1, 1970 (not counting leap
  /// seconds).</param>
  void SetTimestamp(const int64_t timestampInEpochMillis);

  /// <summary>
  /// Gets the timestamp of an event, in milliseconds.
  /// Zero is returned when the time stamp was not specified with SetTimestamp().
  /// </summary>
  /// <returns>The timestamp of the event, specified in milliseconds.</returns>
  int64_t GetTimestamp() const;
#endif

  /// <summary>
  /// Specify a property for an event.
  /// It either creates a new property if none exists or overwrites the existing one.
  /// </summary>
  /// <param name='name'>Name of the property</param>
  /// <param name='value'>Value of the property</param>
  /// <param name='attribs'>attribs of the property</param>
  void SetProperty(const std::string &name, Property value) { m_props[name] = value; }

  /// <summary>
  /// Specify a property for an event.
  /// It either creates a new property if none exists or overwrites the existing one.
  /// </summary>
  void SetProperty(const std::string &name, char const *value, Attributes attribs = 0)
  {
    SetProperty(name, Property(value, attribs));
  }

  /// <summary>
  /// Specify a property for an event.
  /// It either creates a new property if none exists or overwrites the existing one.
  /// </summary>
  void SetProperty(const std::string &name, const std::string &value, Attributes attribs = 0);

  /// <summary>
  /// Specify a property for an event.
  /// It either creates a new property if none exists or overwrites the existing one.
  /// </summary>
  void SetProperty(const std::string &name, double value, Attributes attribs = 0);

  /// <summary>
  /// Specify a property for an event.
  /// It either creates a new property if none exists or overwrites the existing one.
  /// </summary>
  void SetProperty(const std::string &name, int64_t value, Attributes attribs = 0);

  /// <summary>
  /// Specify a property for an event.
  /// It either creates a new property if none exists or overwrites the existing one.
  /// </summary>
  void SetProperty(const std::string &name, bool value, Attributes attribs = 0);

  /// <summary>
  /// Specify a property for an event.
  /// It either creates a new property if none exists or overwrites the existing one.
  /// </summary>
  void SetProperty(const std::string &name, time_ticks value, Attributes attribs = 0);

  /// <summary>
  /// Specify a property for an event.
  /// It either creates a new property if none exists or overwrites the existing one.
  /// </summary>
  void SetProperty(const std::string &name, UUID value, Attributes attribs = 0);

  /// <summary>
  /// Specify a property for an event. It either creates a new property if none exists or overwrites
  /// the existing one.<br> All integer types are currently being converted to int64_t.
  /// </summary>
  void SetProperty(const std::string &name, int8_t value, Attributes attribs = 0)
  {
    SetProperty(name, (int64_t)value, attribs);
  }

  /// <summary>
  /// Specify a property for an event. It either creates a new property if none exists or overwrites
  /// the existing one.<br> All integer types are currently being converted to int64_t.
  void SetProperty(const std::string &name, int16_t value, Attributes attribs = 0)
  {
    SetProperty(name, (int64_t)value, attribs);
  }

  /// <summary>
  /// Specify a property for an event. It either creates a new property if none exists or overwrites
  /// the existing one.<br> All integer types are currently being converted to int64_t.
  void SetProperty(const std::string &name, int32_t value, Attributes attribs = 0)
  {
    SetProperty(name, (int64_t)value, attribs);
  }

  /// <summary>
  /// Specify a property for an event. It either creates a new property if none exists or overwrites
  /// the existing one.<br> All integer types are currently being converted to int64_t.
  void SetProperty(const std::string &name, uint8_t value, Attributes attribs = 0)
  {
    SetProperty(name, (int64_t)value, attribs);
  }

  /// <summary>
  /// Specify a property for an event. It either creates a new property if none exists or overwrites
  /// the existing one.<br> All integer types are currently being converted to int64_t.
  void SetProperty(const std::string &name, uint16_t value, Attributes attribs = 0)
  {
    SetProperty(name, (int64_t)value, attribs);
  }

  /// <summary>
  /// Specify a property for an event. It either creates a new property if none exists or overwrites
  /// the existing one.<br> All integer types are currently being converted to int64_t.
  void SetProperty(const std::string &name, uint32_t value, Attributes attribs = 0)
  {
    SetProperty(name, (int64_t)value, attribs);
  }

  /// <summary>
  /// Specify a property for an event. It either creates a new property if none exists or overwrites
  /// the existing one.<br> All integer types are currently being converted to int64_t.
  void SetProperty(const std::string &name, uint64_t value, Attributes attribs = 0)
  {
    SetProperty(name, (int64_t)value, attribs);
  }

#ifdef HAVE_COLLECTIONS
  /// <summary>
  /// Specify a property for an event.
  /// It either creates a new property if none exists or overwrites the existing one.
  /// </summary>
  void SetProperty(const std::string &name,
                   std::vector<std::string> &value,
                   Attributes attribs = 0);

  /// <summary>
  /// Specify a property for an event.
  /// It either creates a new property if none exists or overwrites the existing one.
  /// </summary>
  void SetProperty(const std::string &name, std::vector<UUID> &value);

  /// <summary>
  /// Specify a property for an event.
  /// It either creates a new property if none exists or overwrites the existing one.
  /// </summary>
  void SetProperty(const std::string &name, std::vector<double> &value, Attributes attribs = 0);

  /// <summary>
  /// Specify a property for an event.
  /// It either creates a new property if none exists or overwrites the existing one.
  /// </summary>
  void SetProperty(const std::string &name, std::vector<int64_t> &value, Attributes attribs = 0);
#endif

  /// <summary>
  /// Get the properties bag of an event.
  /// </summary>
  /// <returns>Properties bag of the event</returns>
  const std::map<std::string, Property> &GetProperties() const { return m_props; }

  /// <summary>
  /// Erase property from event.
  /// </summary>
  size_t erase(const std::string &key)
  {
    auto result = m_props.erase(key);
    return result;
  }

  virtual ~Properties() noexcept {};
};

}  // namespace event

OPENTELEMETRY_END_NAMESPACE
